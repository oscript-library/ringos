#Использовать asserts
#Использовать logos
#Использовать "../../../pkg/command"
#Использовать "../../../internal/utils"
#Использовать "../../../internal/localization"

#Область ОписаниеПеременных

Перем МодульRing;
Перем ТекущееРасположение;

Перем Лог; // Объект для логирования событий
Перем ЛокализованныеСтроки; // Локализованные строки

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получить список зарегистрированных установок 1C:Enterprise Development Tools
//
//  Возвращаемое значение:
//   Массив Из Строка - Список установок
//
Функция СписокРасположений() Экспорт
	
	Команда = НоваяКомандаRing();
	Команда.ДобавитьПараметр("locations");
	Команда.ДобавитьПараметр("list");
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаЗапускаетсяКоманда, "locations list");
	Команда.Исполнить();
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыполниласьКоманда, "locations list");
	
	СписокУстановокСтрокой = Команда.ПолучитьВывод();
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыводКоманды, "locations list", СписокУстановокСтрокой);
	
	СписокУстановок = Новый Массив;
	РегулярноеВыражение = Новый РегулярноеВыражение("^\s*(.+)\s*$");
	Совпадения = РегулярноеВыражение.НайтиСовпадения(СписокУстановокСтрокой);
	Для каждого Совпадение Из Совпадения Цикл
		
		Расположение = Совпадение.Группы[1].Значение;
		СписокУстановок.Добавить(Расположение);
		
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаНайденоРасположение, Расположение);
		
	КонецЦикла;
	
	Возврат СписокУстановок;
	
КонецФункции

// Задать установку 1C:Enterprise Development Tools по умолчанию
//
// Параметры:
//   Расположение - Строка - Путь к установке 1C:Enterprise Development Tools.
//	                         Используйте значение @none чтобы сбросить установку по умолчанию.
//
Процедура УстановитьРасположениеПоУмолчанию(Расположение) Экспорт
	
	Ожидаем.Что(Расположение,
		ЛокализованныеСтроки.ИсключениеРасположениеТип).ИмеетТип("Строка");
	Ожидаем.Что(Расположение,
		ЛокализованныеСтроки.ИсключениеРасположениеЗаполненность).Заполнено();
	
	Команда = НоваяКомандаRing();
	Команда.ДобавитьПараметр("locations");
	Команда.ДобавитьПараметр("set-default");
	
	Если Расположение = "@none" Тогда
		Команда.ДобавитьПараметр(Расположение);
	Иначе
		Команда.ДобавитьПараметр(ЭкранироватьИмяФайла(Расположение));
	КонецЕсли;
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаУстанавливаемРасположение, Расположение);
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаЗапускаетсяКоманда, "locations set-default");
	Команда.Исполнить(Ложь);
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыполниласьКоманда, "locations set-default");
	
КонецПроцедуры

// Установить расположение директории для запуска EDT
//
// Параметры:
//   Расположение - Строка -  Директория, содержащая запускаемую установку 1C:Enterprise Development Tools
//
Процедура УстановитьТекущееРасположение(Расположение) Экспорт
	
	Ожидаем.Что(Расположение,
		ЛокализованныеСтроки.ИсключениеРасположениеТип).ИмеетТип("Строка");
	Ожидаем.Что(Расположение,
		ЛокализованныеСтроки.ИсключениеРасположениеЗаполненность).Заполнено();
	
	ТекущееРасположение = Расположение;
	
КонецПроцедуры

// Получить поддерживаемые 1C:Enterprise Development Tools версии платформы 1С:Предприятия.
//
//  Возвращаемое значение:
//   Массив Из Строка - Список поддерживаемй версий
//
Функция ПоддерживаемыеВерсииПлатформы() Экспорт
	
	Команда = НоваяКомандаRing();
	Команда.ДобавитьПараметр("platform-versions");
	ДополнитьПараметрРасположение(Команда);
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаЗапускаетсяКоманда, "platform-versions");
	Команда.Исполнить();
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыполниласьКоманда, "platform-versions");
	
	СписокПлатформСтрокой = Команда.ПолучитьВывод();
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыводКоманды, "platform-versions", СписокПлатформСтрокой);
	
	ПоддерживаемыеВерсии = Новый Массив;
	РегулярноеВыражение = Новый РегулярноеВыражение("^\s*(?:(?:\d+.\d+.\d+),*\s*)+\s*$");
	Совпадения = РегулярноеВыражение.НайтиСовпадения(СписокПлатформСтрокой);
	Если Совпадения.Количество() > 0 Тогда
		
		ПоддерживаемыеВерсииСтрокой = Совпадения[0].Группы[0].Значение;
		
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаСписокПоддерживаемыхВерсий, ПоддерживаемыеВерсииСтрокой);
		
		РегулярноеВыражение = Новый РегулярноеВыражение("(\d+.\d+.\d+)");
		Совпадения = РегулярноеВыражение.НайтиСовпадения(ПоддерживаемыеВерсииСтрокой);
		Для каждого Совпадение Из Совпадения Цикл
			ПоддерживаемыеВерсии.Добавить(Совпадение.Группы[0].Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаКоличествоПоддерживаемыхВерсий, ПоддерживаемыеВерсии.Количество());
	
	Возврат ПоддерживаемыеВерсии;
	
КонецФункции

// Экспортировать проект 1C:Enterprise Development Tools в файлы конфигурации платформы 1С:Предприятия.
//
// Параметры:
//   ПараметрыЭкспорта - ПараметрыЭкспортаEDT - Параметры экспорта проекта.
//
Процедура ЭкспортироватьПроект(ПараметрыЭкспорта) Экспорт
	
	Ожидаем.Что(ПараметрыЭкспорта).ИмеетТип("ПараметрыЭкспортаEDT");
	
	ПараметрыЭкспорта.ПроверитьЗаполнение();
	
	Команда = НоваяКомандаRing();
	Команда.ДобавитьПараметр("workspace");
	Команда.ДобавитьПараметр("export");
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаФормируютсяПараметрыКоманды, "workspace export");
	
	ДобавитьПараметрКаталогФайловКонфигурации(Команда, ПараметрыЭкспорта.КаталогФайловКонфигурации());
	ДобавитьПараметрКаталогРабочейОбласти(Команда, ПараметрыЭкспорта.КаталогРабочейОбласти());
	
	ДополнитьПараметрКаталогПроекта(Команда, ПараметрыЭкспорта.КаталогПроекта());
	ДополнитьПараметрИмяПроекта(Команда, ПараметрыЭкспорта.ИмяПроекта());
	
	ДополнитьПараметрРасположение(Команда);
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаЗапускаетсяКоманда, "workspace export");
	Команда.Исполнить(Ложь);
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыполниласьКоманда, "workspace export");
	
КонецПроцедуры

// Импортировать проект 1C:Enterprise Development Tools из файлов конфигурации платформы 1С:Предприятия.
//
// Параметры:
//   ПараметрыИмпорта - ПараметрыИмпортаEDT - Параметры импорта проекта.
//
Процедура ИмпортироватьПроект(ПараметрыИмпорта) Экспорт
	
	Ожидаем.Что(ПараметрыИмпорта).ИмеетТип("ПараметрыИмпортаEDT");
	
	ПараметрыИмпорта.ПроверитьЗаполнение();
	
	Команда = НоваяКомандаRing();
	Команда.ДобавитьПараметр("workspace");
	Команда.ДобавитьПараметр("import");
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаФормируютсяПараметрыКоманды, "workspace import");
	
	ДобавитьПараметрКаталогФайловКонфигурации(Команда, ПараметрыИмпорта.КаталогФайловКонфигурации());
	ДобавитьПараметрКаталогРабочейОбласти(Команда, ПараметрыИмпорта.КаталогРабочейОбласти());
	
	ДополнитьПараметрКаталогПроекта(Команда, ПараметрыИмпорта.КаталогПроекта());
	ДополнитьПараметрИмяПроекта(Команда, ПараметрыИмпорта.ИмяПроекта());
	ДополнитьПараметрИмяБазовогоПроекта(Команда, ПараметрыИмпорта.ИмяБазовогоПроекта());
	ДополнитьПараметрВерсияПлатформы(Команда, ПараметрыИмпорта.ВерсияПлатформы());
	
	ДополнитьПараметрРасположение(Команда);
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаЗапускаетсяКоманда, "workspace import");
	Команда.Исполнить(Ложь);
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыполниласьКоманда, "workspace import");
	
КонецПроцедуры

// Провалидировать проекты 1C:Enterprise Development Tools и вывести результат в файл в формате TSV.
//
// Параметры:
//   ПараметрыПроверки - ПараметрыПроверкиEDT - Параметры проверки проекта.
//
Процедура ПроверитьПроект(ПараметрыПроверки) Экспорт
	
	Ожидаем.Что(ПараметрыПроверки).ИмеетТип("ПараметрыПроверкиEDT");
	
	ПараметрыПроверки.ПроверитьЗаполнение();
	
	Команда = НоваяКомандаRing();
	Команда.ДобавитьПараметр("workspace");
	Команда.ДобавитьПараметр("validate");
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаФормируютсяПараметрыКоманды, "workspace validate");
	
	ДобавитьПараметрКаталогРабочейОбласти(Команда, ПараметрыПроверки.КаталогРабочейОбласти());
	ДобавитьПараметрФайлРезультатовПроверки(Команда, ПараметрыПроверки.ФайлРезультата());
	
	ДополнитьПараметрСписокКаталоговПроекта(Команда, ПараметрыПроверки.КаталогиПроектов());
	ДополнитьПараметрСписокИменПроектов(Команда, ПараметрыПроверки.ИменаПроектов());
	
	ДополнитьПараметрРасположение(Команда);
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаЗапускаетсяКоманда, "workspace validate");
	Команда.Исполнить(Ложь);
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыполниласьКоманда, "workspace validate");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта(МодульEDTRing)
	
	Ожидаем.Что(МодульEDTRing).ИмеетТип("МодульRing");
	
	МодульRing = МодульEDTRing;
	
	Лог = ПараметрыПриложения.Лог("edt");
	ЛокализованныеСтроки = ПараметрыПриложения.ЛокализованныеСтроки(Локализация_МодульEDT);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяКомандаRing()
	
	Команда = Новый КомандаRing();
	Команда.УстановитьМодульRing(МодульRing);
	
	Возврат Команда;
	
КонецФункции

Процедура ДобавитьПараметрКаталогФайловКонфигурации(Команда, КаталогФайловКонфигурации)
	
	Команда.ДобавитьПараметр("--configuration-files");
	Команда.ДобавитьПараметр(ЭкранироватьИмяФайла(КаталогФайловКонфигурации));
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрКаталогФайловКонфигурации, КаталогФайловКонфигурации);
	
КонецПроцедуры

Процедура ДобавитьПараметрКаталогРабочейОбласти(Команда, КаталогРабочейОбласти)
	
	Команда.ДобавитьПараметр("--workspace-location");
	Команда.ДобавитьПараметр(ЭкранироватьИмяФайла(КаталогРабочейОбласти));
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрКаталогРабочейОбласти, КаталогРабочейОбласти);
	
КонецПроцедуры

Процедура ДобавитьПараметрФайлРезультатовПроверки(Команда, ФайлРезультатовПроверки)
	
	Команда.ДобавитьПараметр("--file");
	Команда.ДобавитьЭкранированныйПараметр(ФайлРезультатовПроверки);
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрФайлРезультатовПроверки, ФайлРезультатовПроверки);
	
КонецПроцедуры

Процедура ДополнитьПараметрИмяПроекта(Команда, ИмяПроекта)
	
	Если ЗначениеЗаполнено(ИмяПроекта) Тогда
		
		Команда.ДобавитьПараметр("--project-name");
		Команда.ДобавитьЭкранированныйПараметр(ИмяПроекта);
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрИмяПроекта, ИмяПроекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрСписокИменПроектов(Команда, СписокИменПроектов)
	
	Если НЕ ЗначениеЗаполнено(СписокИменПроектов) Тогда
		Возврат;
	КонецЕсли;
	
	Команда.ДобавитьПараметр("--project-name-list");
	Для каждого ИмяПроекта Из СписокИменПроектов Цикл
		Команда.ДобавитьЭкранированныйПараметр(ИмяПроекта);
	КонецЦикла;
	
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрСписокИменПроектов, СтрСоединить(СписокИменПроектов, " "));
	
КонецПроцедуры

Процедура ДополнитьПараметрКаталогПроекта(Команда, КаталогПроекта)
	
	Если ЗначениеЗаполнено(КаталогПроекта) Тогда
		
		Команда.ДобавитьПараметр("--project");
		Команда.ДобавитьПараметр(ЭкранироватьИмяФайла(КаталогПроекта));
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрКаталогПроекта, КаталогПроекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрСписокКаталоговПроекта(Команда, СписокКаталоговПроекта)
	
	Если НЕ ЗначениеЗаполнено(СписокКаталоговПроекта) Тогда
		Возврат;
	КонецЕсли;
	
	Команда.ДобавитьПараметр("--project-list");
	Для каждого КаталогПроекта Из СписокКаталоговПроекта Цикл
		Команда.ДобавитьЭкранированныйПараметр(КаталогПроекта);
	КонецЦикла;
	
	// BSLLS:NestedFunctionInParameters-off
	Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрСписокКаталоговПроектов,
		СтрСоединить(СписокКаталоговПроекта, " "));
	// BSLLS:NestedFunctionInParameters-on
	
КонецПроцедуры

Процедура ДополнитьПараметрИмяБазовогоПроекта(Команда, ИмяБазовогоПроекта)
	
	Если ЗначениеЗаполнено(ИмяБазовогоПроекта) Тогда
		
		Команда.ДобавитьПараметр("--base-project-name");
		Команда.ДобавитьЭкранированныйПараметр(ИмяБазовогоПроекта);
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрИмяБазовогоПроекта, ИмяБазовогоПроекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрВерсияПлатформы(Команда, ВерсияПлатформы)
	
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		
		Команда.ДобавитьПараметр("--version");
		Команда.ДобавитьПараметр(ВерсияПлатформы);
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрВерсияПлатформы, ВерсияПлатформы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрРасположение(Команда)
	
	Если ЗначениеЗаполнено(ТекущееРасположение) Тогда
		
		Команда.ДобавитьПараметр("--edt-location");
		Команда.ДобавитьПараметр(ЭкранироватьИмяФайла(ТекущееРасположение));
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаДобавленПараметрТекущееРасположение, ТекущееРасположение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭкранироватьСтроку(Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Функция ЭкранироватьИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат ЭкранироватьСтроку(Файл.ПолноеИмя);
	
КонецФункции

#КонецОбласти