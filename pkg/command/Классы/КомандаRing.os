#Использовать 1commands
#Использовать asserts
#Использовать "../../../internal/utils"
#Использовать "../../../internal/localization"

#Область ОписаниеПеременных

Перем Лог; // Объект для логирования событий
Перем ЛокализованныеСтроки; // Локализованные строки

Перем МодульRing; // Модуль команды Ring
Перем Команда; // Команда систмы для исполнения
Перем Параметры; // Список текущих параметров команды
Перем ПараметрыКоманды; // Параметры выполнения команды Ring

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает параметры выполнения команды
//
// Параметры:
//   ПараметрыКомандыRing - ПараметрыКомандыRing - параметры команды
//
Процедура УстановитьПараметрыКоманды(ПараметрыКомандыRing) Экспорт

	Ожидаем.Что(ПараметрыКомандыRing,
		ЛокализованныеСтроки.ИсключениеПараметрыКомандыRingТип).ИмеетТип("ПараметрыКомандыRing");
	
	ПараметрыКоманды = ПараметрыКомандыRing;

КонецПроцедуры

// Устнавливает текущий модуль Ring
//
// Параметры:
//   ПараметрМодульRing - МодульRing - модуль ring edt
//
Процедура УстановитьМодульRing(ПараметрМодульRing) Экспорт
	
	Ожидаем.Что(ПараметрМодульRing,
		ЛокализованныеСтроки.ИсключениеМодульRingТип).ИмеетТип("МодульRing");
	Ожидаем.Что(ПараметрМодульRing.Имя(),
		ЛокализованныеСтроки.ИсключениеМодульRingИмя).Равно("edt");

	МодульRing = ПараметрМодульRing;
	
КонецПроцедуры

// Добавляет параметр команды в набор параметров
//
// Параметры:
//   Параметр - Строка - параметр команды
//
Процедура ДобавитьПараметр(Параметр) Экспорт

	Ожидаем.Что(Параметр,
		ЛокализованныеСтроки.ИсключениеПараметрТип).ИмеетТип("Строка");
	Ожидаем.Что(Параметр,
		ЛокализованныеСтроки.ИсключениеПараметрЗаполнение).Заполнено();

	Параметры.Добавить(Параметр);

КонецПроцедуры

// Добавляет параметр команды с принудительным экранированием кавычками
//
// Параметры:
//   Параметр - Строка - параметр команды
//
Процедура ДобавитьЭкранированныйПараметр(Параметр) Экспорт

	Ожидаем.Что(Параметр,
		ЛокализованныеСтроки.ИсключениеПараметрТип).ИмеетТип("Строка");
	Ожидаем.Что(Параметр,
		ЛокализованныеСтроки.ИсключениеПараметрЗаполнение).Заполнено();

	Параметры.Добавить(ЭкранироватьСтроку(Параметр));

КонецПроцедуры

// Выполнение произвольной команды
//
// Параметры:
//   ИспользоватьВывод - Истина - Использовать вывод после выполнения команды
//
//  Возвращаемое значение:
//   Число - код возврата команды
//
Функция Исполнить(ИспользоватьВывод = Истина) Экспорт
	
	Ожидаем.Что(ИспользоватьВывод,
		ЛокализованныеСтроки.ИсключениеИспользоватьВыводТип).ИмеетТип("Булево");

	Если ЗначениеЗаполнено(МодульRing) Тогда
		
		УстановитьОбщиеПараметры();
		
		Команда.ДобавитьПараметр(МодульRing.Идентификатор());
		
		Команда.ДобавитьПараметры(Параметры);
		
	Иначе
		
		Команда.ДобавитьПараметры(Параметры);
		
		УстановитьОбщиеПараметры();
		
	КонецЕсли;
	
	ПеременныеСреды = Новый Соответствие;
	ПеременныеСреды.Вставить("RING_OPTS", ОпцииRing());
	Команда.УстановитьПеременныеСреды(ПеременныеСреды);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Лог", Лог);
	ДополнительныеПараметры.Вставить("ПерехватыватьВывод", Не ИспользоватьВывод);

	Команда.УстановитьОбработчикОжидания(ЭтотОбъект,, ДополнительныеПараметры);
	
	Возврат Команда.Исполнить();
	
КонецФункции

// Получить вывод выполненной команды.
//
//  Возвращаемое значение:
//   Строка - Вывод команды
//
Функция ПолучитьВывод() Экспорт
	Возврат Команда.ПолучитьВывод();
КонецФункции

// Установить диапазон ожидаемых кодов возврата
// После исполнения команды будет выброшено исключение, если полученный код возврата не попадает в указанный диапазон
//
// Параметры:
//   МинимальныйОжидаемыйКодВозврата - Число
//   МаксимальныйОжидаемыйКодВозврата - Число
//
Процедура УстановитьДиапазонПравильныхКодовВозврата(Знач МинимальныйОжидаемыйКодВозврата,
		Знач МаксимальныйОжидаемыйКодВозврата) Экспорт
	
	Команда.УстановитьДиапазонПравильныхКодовВозврата(МинимальныйОжидаемыйКодВозврата,
		МаксимальныйОжидаемыйКодВозврата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта()
	
	Лог = ПараметрыПриложения.Лог("command");
	ЛокализованныеСтроки = ПараметрыПриложения.ЛокализованныеСтроки(Локализация_КомандаRing);
	
	ПараметрыКоманды = Новый ПараметрыКомандыRing();
	Параметры = Новый Массив;
	
	Команда = Новый Команда();
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	Команда.УстановитьКоманду("ring");
	Команда.УстановитьПравильныйКодВозврата(0);
	
КонецПроцедуры

// BSLLS:UnusedParameters-off
Процедура ОбработкаОжиданияПроцесса(
	Процесс,
	ПрерываниеПроцесса,
	ПериодОпросаВМиллисекундах,
	ДополнительныеПараметры,
	СтандартнаяОбработка) Экспорт
// BSLLS:UnusedParameters-on

	СтандартнаяОбработка = Ложь;

	ПотокОшибок = Процесс.ПотокОшибок;
	Если ПотокОшибок.ЕстьДанные Тогда
		
		СодержимоеПотока = ПотокОшибок.Прочитать();

		Для НомерСтроки = 1 По СтрЧислоСтрок(СодержимоеПотока) Цикл
			
			СтрокаПотока = СтрПолучитьСтроку(СодержимоеПотока, НомерСтроки);

			Если ЭтоПредупреждение(СтрокаПотока) Тогда
				
				ВывестиКакПредупреждение(Лог, СтрокаПотока);

			Иначе
				Лог.Ошибка(СтрокаПотока);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	ПотокВывода = Процесс.ПотокВывода;
	Если ДополнительныеПараметры.ПерехватыватьВывод И ПотокВывода.ЕстьДанные Тогда
		
		ТекущийВывод = ПотокВывода.Прочитать();
		ДополнительныеПараметры.Лог.Информация(ТекущийВывод);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОбщиеПараметры()
	
	УровеньДетализацииСообщений = ПараметрыКоманды.УровеньДетализацииСообщений();
	Если ЗначениеЗаполнено(УровеньДетализацииСообщений) Тогда
		
		Команда.ДобавитьПараметр(СтрШаблон("-l %1", УровеньДетализацииСообщений));
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаУровеньДетализацииСообщений, УровеньДетализацииСообщений);
		
	КонецЕсли;
	
	Если ПараметрыКоманды.ВыводОтладочнойИнформации() Тогда
		
		Команда.ДобавитьПараметр("-x");
		
		Лог.Отладка(ЛокализованныеСтроки.ОтладкаВыводОтладочнойИнформации);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпцииRing()
	
	ОпцииRing = Новый Массив;
	ОпцииRing.Добавить("-Dfile.encoding=UTF-8");
	
	Если ТипЗнч(ПараметрыКоманды) = Тип("ПараметрыКомандыRing") Тогда
		
		ЯзыкВывода = ПараметрыКоманды.ЯзыкВывода();
		
		Если ЗначениеЗаполнено(ЯзыкВывода) Тогда
			
			ОпцииRing.Добавить(СтрШаблон("-Duser.country=%1", ЯзыкВывода));
			ОпцииRing.Добавить(СтрШаблон("-Duser.language=%1", ВРег(ЯзыкВывода)));
			
			Лог.Отладка(ЛокализованныеСтроки.ОтладкаЯзыкВывода, ЯзыкВывода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(ОпцииRing, " ");
	
КонецФункции

Функция ЭкранироватьСтроку(Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Функция ЭтоПредупреждение(СтрокаСообщения)

	РегулярноеВыражение = Новый РегулярноеВыражение("^(WARNING:.+|Warning:.+|\[WARN  \].+)$");
	Результат = РегулярноеВыражение.Совпадает(СтрокаСообщения);

	Возврат Результат;
	
КонецФункции

Процедура ВывестиКакПредупреждение(Лог, СтрокаСообщения)

	РегулярноеВыражение = Новый РегулярноеВыражение("^(WARNING:\s+|Warning:\s+|\[WARN  \]\s+)");
	СтрокаПредупреждение = РегулярноеВыражение.Заменить(СтрокаСообщения, "");
	Лог.Предупреждение(СтрокаПредупреждение);

КонецПроцедуры

#КонецОбласти